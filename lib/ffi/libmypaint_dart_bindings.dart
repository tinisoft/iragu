// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void mypaint_rectangle_expand_to_include_point(
    ffi.Pointer<MyPaintRectangle> r,
    int x,
    int y,
  ) {
    return _mypaint_rectangle_expand_to_include_point(
      r,
      x,
      y,
    );
  }

  late final _mypaint_rectangle_expand_to_include_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<MyPaintRectangle>, ffi.Int,
              ffi.Int)>>('mypaint_rectangle_expand_to_include_point');
  late final _mypaint_rectangle_expand_to_include_point =
      _mypaint_rectangle_expand_to_include_pointPtr
          .asFunction<void Function(ffi.Pointer<MyPaintRectangle>, int, int)>();

  void mypaint_rectangle_expand_to_include_rect(
    ffi.Pointer<MyPaintRectangle> r,
    ffi.Pointer<MyPaintRectangle> other,
  ) {
    return _mypaint_rectangle_expand_to_include_rect(
      r,
      other,
    );
  }

  late final _mypaint_rectangle_expand_to_include_rectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<MyPaintRectangle>,
                  ffi.Pointer<MyPaintRectangle>)>>(
      'mypaint_rectangle_expand_to_include_rect');
  late final _mypaint_rectangle_expand_to_include_rect =
      _mypaint_rectangle_expand_to_include_rectPtr.asFunction<
          void Function(
              ffi.Pointer<MyPaintRectangle>, ffi.Pointer<MyPaintRectangle>)>();

  ffi.Pointer<MyPaintRectangle> mypaint_rectangle_copy(
    ffi.Pointer<MyPaintRectangle> self,
  ) {
    return _mypaint_rectangle_copy(
      self,
    );
  }

  late final _mypaint_rectangle_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MyPaintRectangle> Function(
              ffi.Pointer<MyPaintRectangle>)>>('mypaint_rectangle_copy');
  late final _mypaint_rectangle_copy = _mypaint_rectangle_copyPtr.asFunction<
      ffi.Pointer<MyPaintRectangle> Function(ffi.Pointer<MyPaintRectangle>)>();

  /// mypaint_surface_draw_dab:
  ///
  /// Draw a dab onto the surface.
  int mypaint_surface_draw_dab(
    ffi.Pointer<MyPaintSurface> self,
    double x,
    double y,
    double radius,
    double color_r,
    double color_g,
    double color_b,
    double opaque,
    double hardness,
    double softness,
    double alpha_eraser,
    double aspect_ratio,
    double angle,
    double lock_alpha,
    double colorize,
    double posterize,
    double posterize_num,
    double paint,
  ) {
    return _mypaint_surface_draw_dab(
      self,
      x,
      y,
      radius,
      color_r,
      color_g,
      color_b,
      opaque,
      hardness,
      softness,
      alpha_eraser,
      aspect_ratio,
      angle,
      lock_alpha,
      colorize,
      posterize,
      posterize_num,
      paint,
    );
  }

  late final _mypaint_surface_draw_dabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<MyPaintSurface>,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('mypaint_surface_draw_dab');
  late final _mypaint_surface_draw_dab =
      _mypaint_surface_draw_dabPtr.asFunction<
          int Function(
              ffi.Pointer<MyPaintSurface>,
              double,
              double,
              double,
              double,
              double,
              double,
              double,
              double,
              double,
              double,
              double,
              double,
              double,
              double,
              double,
              double,
              double)>();

  void mypaint_surface_get_color(
    ffi.Pointer<MyPaintSurface> self,
    double x,
    double y,
    double radius,
    ffi.Pointer<ffi.Float> color_r,
    ffi.Pointer<ffi.Float> color_g,
    ffi.Pointer<ffi.Float> color_b,
    ffi.Pointer<ffi.Float> color_a,
    double paint,
  ) {
    return _mypaint_surface_get_color(
      self,
      x,
      y,
      radius,
      color_r,
      color_g,
      color_b,
      color_a,
      paint,
    );
  }

  late final _mypaint_surface_get_colorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<MyPaintSurface>,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Float)>>('mypaint_surface_get_color');
  late final _mypaint_surface_get_color =
      _mypaint_surface_get_colorPtr.asFunction<
          void Function(
              ffi.Pointer<MyPaintSurface>,
              double,
              double,
              double,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              double)>();

  double mypaint_surface_get_alpha(
    ffi.Pointer<MyPaintSurface> self,
    double x,
    double y,
    double radius,
  ) {
    return _mypaint_surface_get_alpha(
      self,
      x,
      y,
      radius,
    );
  }

  late final _mypaint_surface_get_alphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<MyPaintSurface>, ffi.Float, ffi.Float,
              ffi.Float)>>('mypaint_surface_get_alpha');
  late final _mypaint_surface_get_alpha =
      _mypaint_surface_get_alphaPtr.asFunction<
          double Function(
              ffi.Pointer<MyPaintSurface>, double, double, double)>();

  void mypaint_surface_save_png(
    ffi.Pointer<MyPaintSurface> self,
    ffi.Pointer<ffi.Char> path,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _mypaint_surface_save_png(
      self,
      path,
      x,
      y,
      width,
      height,
    );
  }

  late final _mypaint_surface_save_pngPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<MyPaintSurface>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('mypaint_surface_save_png');
  late final _mypaint_surface_save_png =
      _mypaint_surface_save_pngPtr.asFunction<
          void Function(ffi.Pointer<MyPaintSurface>, ffi.Pointer<ffi.Char>, int,
              int, int, int)>();

  void mypaint_surface_begin_atomic(
    ffi.Pointer<MyPaintSurface> self,
  ) {
    return _mypaint_surface_begin_atomic(
      self,
    );
  }

  late final _mypaint_surface_begin_atomicPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MyPaintSurface>)>>(
      'mypaint_surface_begin_atomic');
  late final _mypaint_surface_begin_atomic = _mypaint_surface_begin_atomicPtr
      .asFunction<void Function(ffi.Pointer<MyPaintSurface>)>();

  void mypaint_surface_end_atomic(
    ffi.Pointer<MyPaintSurface> self,
    ffi.Pointer<MyPaintRectangles> roi,
  ) {
    return _mypaint_surface_end_atomic(
      self,
      roi,
    );
  }

  late final _mypaint_surface_end_atomicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<MyPaintSurface>,
              ffi.Pointer<MyPaintRectangles>)>>('mypaint_surface_end_atomic');
  late final _mypaint_surface_end_atomic =
      _mypaint_surface_end_atomicPtr.asFunction<
          void Function(
              ffi.Pointer<MyPaintSurface>, ffi.Pointer<MyPaintRectangles>)>();

  void mypaint_surface_init(
    ffi.Pointer<MyPaintSurface> self,
  ) {
    return _mypaint_surface_init(
      self,
    );
  }

  late final _mypaint_surface_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MyPaintSurface>)>>(
      'mypaint_surface_init');
  late final _mypaint_surface_init = _mypaint_surface_initPtr
      .asFunction<void Function(ffi.Pointer<MyPaintSurface>)>();

  void mypaint_surface_ref(
    ffi.Pointer<MyPaintSurface> self,
  ) {
    return _mypaint_surface_ref(
      self,
    );
  }

  late final _mypaint_surface_refPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MyPaintSurface>)>>(
      'mypaint_surface_ref');
  late final _mypaint_surface_ref = _mypaint_surface_refPtr
      .asFunction<void Function(ffi.Pointer<MyPaintSurface>)>();

  void mypaint_surface_unref(
    ffi.Pointer<MyPaintSurface> self,
  ) {
    return _mypaint_surface_unref(
      self,
    );
  }

  late final _mypaint_surface_unrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MyPaintSurface>)>>(
      'mypaint_surface_unref');
  late final _mypaint_surface_unref = _mypaint_surface_unrefPtr
      .asFunction<void Function(ffi.Pointer<MyPaintSurface>)>();

  ffi.Pointer<MyPaintBrushSettingInfo> mypaint_brush_setting_info(
    int id,
  ) {
    return _mypaint_brush_setting_info(
      id,
    );
  }

  late final _mypaint_brush_setting_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MyPaintBrushSettingInfo> Function(
              ffi.Int32)>>('mypaint_brush_setting_info');
  late final _mypaint_brush_setting_info = _mypaint_brush_setting_infoPtr
      .asFunction<ffi.Pointer<MyPaintBrushSettingInfo> Function(int)>();

  ffi.Pointer<gchar> mypaint_brush_setting_info_get_name(
    ffi.Pointer<MyPaintBrushSettingInfo> self,
  ) {
    return _mypaint_brush_setting_info_get_name(
      self,
    );
  }

  late final _mypaint_brush_setting_info_get_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(
                  ffi.Pointer<MyPaintBrushSettingInfo>)>>(
      'mypaint_brush_setting_info_get_name');
  late final _mypaint_brush_setting_info_get_name =
      _mypaint_brush_setting_info_get_namePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<MyPaintBrushSettingInfo>)>();

  ffi.Pointer<gchar> mypaint_brush_setting_info_get_tooltip(
    ffi.Pointer<MyPaintBrushSettingInfo> self,
  ) {
    return _mypaint_brush_setting_info_get_tooltip(
      self,
    );
  }

  late final _mypaint_brush_setting_info_get_tooltipPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(
                  ffi.Pointer<MyPaintBrushSettingInfo>)>>(
      'mypaint_brush_setting_info_get_tooltip');
  late final _mypaint_brush_setting_info_get_tooltip =
      _mypaint_brush_setting_info_get_tooltipPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<MyPaintBrushSettingInfo>)>();

  int mypaint_brush_setting_from_cname(
    ffi.Pointer<ffi.Char> cname,
  ) {
    return _mypaint_brush_setting_from_cname(
      cname,
    );
  }

  late final _mypaint_brush_setting_from_cnamePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'mypaint_brush_setting_from_cname');
  late final _mypaint_brush_setting_from_cname =
      _mypaint_brush_setting_from_cnamePtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<MyPaintBrushInputInfo> mypaint_brush_input_info(
    int id,
  ) {
    return _mypaint_brush_input_info(
      id,
    );
  }

  late final _mypaint_brush_input_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MyPaintBrushInputInfo> Function(
              ffi.Int32)>>('mypaint_brush_input_info');
  late final _mypaint_brush_input_info = _mypaint_brush_input_infoPtr
      .asFunction<ffi.Pointer<MyPaintBrushInputInfo> Function(int)>();

  ffi.Pointer<gchar> mypaint_brush_input_info_get_name(
    ffi.Pointer<MyPaintBrushInputInfo> self,
  ) {
    return _mypaint_brush_input_info_get_name(
      self,
    );
  }

  late final _mypaint_brush_input_info_get_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<MyPaintBrushInputInfo>)>>(
      'mypaint_brush_input_info_get_name');
  late final _mypaint_brush_input_info_get_name =
      _mypaint_brush_input_info_get_namePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<MyPaintBrushInputInfo>)>();

  ffi.Pointer<gchar> mypaint_brush_input_info_get_tooltip(
    ffi.Pointer<MyPaintBrushInputInfo> self,
  ) {
    return _mypaint_brush_input_info_get_tooltip(
      self,
    );
  }

  late final _mypaint_brush_input_info_get_tooltipPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<MyPaintBrushInputInfo>)>>(
      'mypaint_brush_input_info_get_tooltip');
  late final _mypaint_brush_input_info_get_tooltip =
      _mypaint_brush_input_info_get_tooltipPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<MyPaintBrushInputInfo>)>();

  int mypaint_brush_input_from_cname(
    ffi.Pointer<ffi.Char> cname,
  ) {
    return _mypaint_brush_input_from_cname(
      cname,
    );
  }

  late final _mypaint_brush_input_from_cnamePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'mypaint_brush_input_from_cname');
  late final _mypaint_brush_input_from_cname =
      _mypaint_brush_input_from_cnamePtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<MyPaintBrush> mypaint_brush_new() {
    return _mypaint_brush_new();
  }

  late final _mypaint_brush_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MyPaintBrush> Function()>>(
          'mypaint_brush_new');
  late final _mypaint_brush_new =
      _mypaint_brush_newPtr.asFunction<ffi.Pointer<MyPaintBrush> Function()>();

  ffi.Pointer<MyPaintBrush> mypaint_brush_new_with_buckets(
    int num_smudge_buckets,
  ) {
    return _mypaint_brush_new_with_buckets(
      num_smudge_buckets,
    );
  }

  late final _mypaint_brush_new_with_bucketsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MyPaintBrush> Function(ffi.Int)>>(
          'mypaint_brush_new_with_buckets');
  late final _mypaint_brush_new_with_buckets =
      _mypaint_brush_new_with_bucketsPtr
          .asFunction<ffi.Pointer<MyPaintBrush> Function(int)>();

  void mypaint_brush_unref(
    ffi.Pointer<MyPaintBrush> self,
  ) {
    return _mypaint_brush_unref(
      self,
    );
  }

  late final _mypaint_brush_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MyPaintBrush>)>>(
          'mypaint_brush_unref');
  late final _mypaint_brush_unref = _mypaint_brush_unrefPtr
      .asFunction<void Function(ffi.Pointer<MyPaintBrush>)>();

  void mypaint_brush_ref(
    ffi.Pointer<MyPaintBrush> self,
  ) {
    return _mypaint_brush_ref(
      self,
    );
  }

  late final _mypaint_brush_refPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MyPaintBrush>)>>(
          'mypaint_brush_ref');
  late final _mypaint_brush_ref = _mypaint_brush_refPtr
      .asFunction<void Function(ffi.Pointer<MyPaintBrush>)>();

  void mypaint_brush_reset(
    ffi.Pointer<MyPaintBrush> self,
  ) {
    return _mypaint_brush_reset(
      self,
    );
  }

  late final _mypaint_brush_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MyPaintBrush>)>>(
          'mypaint_brush_reset');
  late final _mypaint_brush_reset = _mypaint_brush_resetPtr
      .asFunction<void Function(ffi.Pointer<MyPaintBrush>)>();

  void mypaint_brush_new_stroke(
    ffi.Pointer<MyPaintBrush> self,
  ) {
    return _mypaint_brush_new_stroke(
      self,
    );
  }

  late final _mypaint_brush_new_strokePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MyPaintBrush>)>>(
          'mypaint_brush_new_stroke');
  late final _mypaint_brush_new_stroke = _mypaint_brush_new_strokePtr
      .asFunction<void Function(ffi.Pointer<MyPaintBrush>)>();

  int mypaint_brush_stroke_to(
    ffi.Pointer<MyPaintBrush> self,
    ffi.Pointer<MyPaintSurface> surface,
    double x,
    double y,
    double pressure,
    double xtilt,
    double ytilt,
    double dtime,
    double viewzoom,
    double viewrotation,
    double barrel_rotation,
    int linear,
  ) {
    return _mypaint_brush_stroke_to(
      self,
      surface,
      x,
      y,
      pressure,
      xtilt,
      ytilt,
      dtime,
      viewzoom,
      viewrotation,
      barrel_rotation,
      linear,
    );
  }

  late final _mypaint_brush_stroke_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<MyPaintBrush>,
              ffi.Pointer<MyPaintSurface>,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Double,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              gboolean)>>('mypaint_brush_stroke_to');
  late final _mypaint_brush_stroke_to = _mypaint_brush_stroke_toPtr.asFunction<
      int Function(
          ffi.Pointer<MyPaintBrush>,
          ffi.Pointer<MyPaintSurface>,
          double,
          double,
          double,
          double,
          double,
          double,
          double,
          double,
          double,
          int)>();

  void mypaint_brush_set_base_value(
    ffi.Pointer<MyPaintBrush> self,
    int id,
    double value,
  ) {
    return _mypaint_brush_set_base_value(
      self,
      id,
      value,
    );
  }

  late final _mypaint_brush_set_base_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<MyPaintBrush>, ffi.Int32,
              ffi.Float)>>('mypaint_brush_set_base_value');
  late final _mypaint_brush_set_base_value = _mypaint_brush_set_base_valuePtr
      .asFunction<void Function(ffi.Pointer<MyPaintBrush>, int, double)>();

  double mypaint_brush_get_base_value(
    ffi.Pointer<MyPaintBrush> self,
    int id,
  ) {
    return _mypaint_brush_get_base_value(
      self,
      id,
    );
  }

  late final _mypaint_brush_get_base_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<MyPaintBrush>,
              ffi.Int32)>>('mypaint_brush_get_base_value');
  late final _mypaint_brush_get_base_value = _mypaint_brush_get_base_valuePtr
      .asFunction<double Function(ffi.Pointer<MyPaintBrush>, int)>();

  int mypaint_brush_is_constant(
    ffi.Pointer<MyPaintBrush> self,
    int id,
  ) {
    return _mypaint_brush_is_constant(
      self,
      id,
    );
  }

  late final _mypaint_brush_is_constantPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<MyPaintBrush>,
              ffi.Int32)>>('mypaint_brush_is_constant');
  late final _mypaint_brush_is_constant = _mypaint_brush_is_constantPtr
      .asFunction<int Function(ffi.Pointer<MyPaintBrush>, int)>();

  int mypaint_brush_get_inputs_used_n(
    ffi.Pointer<MyPaintBrush> self,
    int id,
  ) {
    return _mypaint_brush_get_inputs_used_n(
      self,
      id,
    );
  }

  late final _mypaint_brush_get_inputs_used_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<MyPaintBrush>,
              ffi.Int32)>>('mypaint_brush_get_inputs_used_n');
  late final _mypaint_brush_get_inputs_used_n =
      _mypaint_brush_get_inputs_used_nPtr
          .asFunction<int Function(ffi.Pointer<MyPaintBrush>, int)>();

  void mypaint_brush_set_mapping_n(
    ffi.Pointer<MyPaintBrush> self,
    int id,
    int input,
    int n,
  ) {
    return _mypaint_brush_set_mapping_n(
      self,
      id,
      input,
      n,
    );
  }

  late final _mypaint_brush_set_mapping_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<MyPaintBrush>, ffi.Int32, ffi.Int32,
              ffi.Int)>>('mypaint_brush_set_mapping_n');
  late final _mypaint_brush_set_mapping_n = _mypaint_brush_set_mapping_nPtr
      .asFunction<void Function(ffi.Pointer<MyPaintBrush>, int, int, int)>();

  int mypaint_brush_get_mapping_n(
    ffi.Pointer<MyPaintBrush> self,
    int id,
    int input,
  ) {
    return _mypaint_brush_get_mapping_n(
      self,
      id,
      input,
    );
  }

  late final _mypaint_brush_get_mapping_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<MyPaintBrush>, ffi.Int32,
              ffi.Int32)>>('mypaint_brush_get_mapping_n');
  late final _mypaint_brush_get_mapping_n = _mypaint_brush_get_mapping_nPtr
      .asFunction<int Function(ffi.Pointer<MyPaintBrush>, int, int)>();

  void mypaint_brush_set_mapping_point(
    ffi.Pointer<MyPaintBrush> self,
    int id,
    int input,
    int index,
    double x,
    double y,
  ) {
    return _mypaint_brush_set_mapping_point(
      self,
      id,
      input,
      index,
      x,
      y,
    );
  }

  late final _mypaint_brush_set_mapping_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<MyPaintBrush>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int,
              ffi.Float,
              ffi.Float)>>('mypaint_brush_set_mapping_point');
  late final _mypaint_brush_set_mapping_point =
      _mypaint_brush_set_mapping_pointPtr.asFunction<
          void Function(
              ffi.Pointer<MyPaintBrush>, int, int, int, double, double)>();

  void mypaint_brush_get_mapping_point(
    ffi.Pointer<MyPaintBrush> self,
    int id,
    int input,
    int index,
    ffi.Pointer<ffi.Float> x,
    ffi.Pointer<ffi.Float> y,
  ) {
    return _mypaint_brush_get_mapping_point(
      self,
      id,
      input,
      index,
      x,
      y,
    );
  }

  late final _mypaint_brush_get_mapping_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<MyPaintBrush>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('mypaint_brush_get_mapping_point');
  late final _mypaint_brush_get_mapping_point =
      _mypaint_brush_get_mapping_pointPtr.asFunction<
          void Function(ffi.Pointer<MyPaintBrush>, int, int, int,
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  double mypaint_brush_get_state(
    ffi.Pointer<MyPaintBrush> self,
    int i,
  ) {
    return _mypaint_brush_get_state(
      self,
      i,
    );
  }

  late final _mypaint_brush_get_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<MyPaintBrush>,
              ffi.Int32)>>('mypaint_brush_get_state');
  late final _mypaint_brush_get_state = _mypaint_brush_get_statePtr
      .asFunction<double Function(ffi.Pointer<MyPaintBrush>, int)>();

  void mypaint_brush_set_state(
    ffi.Pointer<MyPaintBrush> self,
    int i,
    double value,
  ) {
    return _mypaint_brush_set_state(
      self,
      i,
      value,
    );
  }

  late final _mypaint_brush_set_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<MyPaintBrush>, ffi.Int32,
              ffi.Float)>>('mypaint_brush_set_state');
  late final _mypaint_brush_set_state = _mypaint_brush_set_statePtr
      .asFunction<void Function(ffi.Pointer<MyPaintBrush>, int, double)>();

  int mypaint_brush_set_smudge_bucket_state(
    ffi.Pointer<MyPaintBrush> self,
    int bucket_index,
    double r,
    double g,
    double b,
    double a,
    double prev_r,
    double prev_g,
    double prev_b,
    double prev_a,
    double prev_color_recentness,
  ) {
    return _mypaint_brush_set_smudge_bucket_state(
      self,
      bucket_index,
      r,
      g,
      b,
      a,
      prev_r,
      prev_g,
      prev_b,
      prev_a,
      prev_color_recentness,
    );
  }

  late final _mypaint_brush_set_smudge_bucket_statePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<MyPaintBrush>,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('mypaint_brush_set_smudge_bucket_state');
  late final _mypaint_brush_set_smudge_bucket_state =
      _mypaint_brush_set_smudge_bucket_statePtr.asFunction<
          int Function(ffi.Pointer<MyPaintBrush>, int, double, double, double,
              double, double, double, double, double, double)>();

  int mypaint_brush_get_smudge_bucket_state(
    ffi.Pointer<MyPaintBrush> self,
    int bucket_index,
    ffi.Pointer<ffi.Float> r,
    ffi.Pointer<ffi.Float> g,
    ffi.Pointer<ffi.Float> b,
    ffi.Pointer<ffi.Float> a,
    ffi.Pointer<ffi.Float> prev_r,
    ffi.Pointer<ffi.Float> prev_g,
    ffi.Pointer<ffi.Float> prev_b,
    ffi.Pointer<ffi.Float> prev_a,
    ffi.Pointer<ffi.Float> prev_color_recentness,
  ) {
    return _mypaint_brush_get_smudge_bucket_state(
      self,
      bucket_index,
      r,
      g,
      b,
      a,
      prev_r,
      prev_g,
      prev_b,
      prev_a,
      prev_color_recentness,
    );
  }

  late final _mypaint_brush_get_smudge_bucket_statePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<MyPaintBrush>,
                  ffi.Int,
                  ffi.Pointer<ffi.Float>,
                  ffi.Pointer<ffi.Float>,
                  ffi.Pointer<ffi.Float>,
                  ffi.Pointer<ffi.Float>,
                  ffi.Pointer<ffi.Float>,
                  ffi.Pointer<ffi.Float>,
                  ffi.Pointer<ffi.Float>,
                  ffi.Pointer<ffi.Float>,
                  ffi.Pointer<ffi.Float>)>>(
      'mypaint_brush_get_smudge_bucket_state');
  late final _mypaint_brush_get_smudge_bucket_state =
      _mypaint_brush_get_smudge_bucket_statePtr.asFunction<
          int Function(
              ffi.Pointer<MyPaintBrush>,
              int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>();

  int mypaint_brush_get_min_smudge_bucket_used(
    ffi.Pointer<MyPaintBrush> self,
  ) {
    return _mypaint_brush_get_min_smudge_bucket_used(
      self,
    );
  }

  late final _mypaint_brush_get_min_smudge_bucket_usedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<MyPaintBrush>)>>(
          'mypaint_brush_get_min_smudge_bucket_used');
  late final _mypaint_brush_get_min_smudge_bucket_used =
      _mypaint_brush_get_min_smudge_bucket_usedPtr
          .asFunction<int Function(ffi.Pointer<MyPaintBrush>)>();

  int mypaint_brush_get_max_smudge_bucket_used(
    ffi.Pointer<MyPaintBrush> self,
  ) {
    return _mypaint_brush_get_max_smudge_bucket_used(
      self,
    );
  }

  late final _mypaint_brush_get_max_smudge_bucket_usedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<MyPaintBrush>)>>(
          'mypaint_brush_get_max_smudge_bucket_used');
  late final _mypaint_brush_get_max_smudge_bucket_used =
      _mypaint_brush_get_max_smudge_bucket_usedPtr
          .asFunction<int Function(ffi.Pointer<MyPaintBrush>)>();

  double mypaint_brush_get_total_stroke_painting_time(
    ffi.Pointer<MyPaintBrush> self,
  ) {
    return _mypaint_brush_get_total_stroke_painting_time(
      self,
    );
  }

  late final _mypaint_brush_get_total_stroke_painting_timePtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<MyPaintBrush>)>>(
      'mypaint_brush_get_total_stroke_painting_time');
  late final _mypaint_brush_get_total_stroke_painting_time =
      _mypaint_brush_get_total_stroke_painting_timePtr
          .asFunction<double Function(ffi.Pointer<MyPaintBrush>)>();

  void mypaint_brush_set_print_inputs(
    ffi.Pointer<MyPaintBrush> self,
    int enabled,
  ) {
    return _mypaint_brush_set_print_inputs(
      self,
      enabled,
    );
  }

  late final _mypaint_brush_set_print_inputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<MyPaintBrush>,
              gboolean)>>('mypaint_brush_set_print_inputs');
  late final _mypaint_brush_set_print_inputs =
      _mypaint_brush_set_print_inputsPtr
          .asFunction<void Function(ffi.Pointer<MyPaintBrush>, int)>();

  void mypaint_brush_from_defaults(
    ffi.Pointer<MyPaintBrush> self,
  ) {
    return _mypaint_brush_from_defaults(
      self,
    );
  }

  late final _mypaint_brush_from_defaultsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MyPaintBrush>)>>(
          'mypaint_brush_from_defaults');
  late final _mypaint_brush_from_defaults = _mypaint_brush_from_defaultsPtr
      .asFunction<void Function(ffi.Pointer<MyPaintBrush>)>();

  int mypaint_brush_from_string(
    ffi.Pointer<MyPaintBrush> self,
    ffi.Pointer<ffi.Char> string,
  ) {
    return _mypaint_brush_from_string(
      self,
      string,
    );
  }

  late final _mypaint_brush_from_stringPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<MyPaintBrush>,
              ffi.Pointer<ffi.Char>)>>('mypaint_brush_from_string');
  late final _mypaint_brush_from_string =
      _mypaint_brush_from_stringPtr.asFunction<
          int Function(ffi.Pointer<MyPaintBrush>, ffi.Pointer<ffi.Char>)>();

  MyPaintTransform mypaint_transform_unit() {
    return _mypaint_transform_unit();
  }

  late final _mypaint_transform_unitPtr =
      _lookup<ffi.NativeFunction<MyPaintTransform Function()>>(
          'mypaint_transform_unit');
  late final _mypaint_transform_unit =
      _mypaint_transform_unitPtr.asFunction<MyPaintTransform Function()>();

  MyPaintTransform mypaint_transform_rotate_cw(
    MyPaintTransform transform,
    double angle_radians,
  ) {
    return _mypaint_transform_rotate_cw(
      transform,
      angle_radians,
    );
  }

  late final _mypaint_transform_rotate_cwPtr = _lookup<
      ffi.NativeFunction<
          MyPaintTransform Function(
              MyPaintTransform, ffi.Float)>>('mypaint_transform_rotate_cw');
  late final _mypaint_transform_rotate_cw = _mypaint_transform_rotate_cwPtr
      .asFunction<MyPaintTransform Function(MyPaintTransform, double)>();

  MyPaintTransform mypaint_transform_rotate_ccw(
    MyPaintTransform transform,
    double angle_radians,
  ) {
    return _mypaint_transform_rotate_ccw(
      transform,
      angle_radians,
    );
  }

  late final _mypaint_transform_rotate_ccwPtr = _lookup<
      ffi.NativeFunction<
          MyPaintTransform Function(
              MyPaintTransform, ffi.Float)>>('mypaint_transform_rotate_ccw');
  late final _mypaint_transform_rotate_ccw = _mypaint_transform_rotate_ccwPtr
      .asFunction<MyPaintTransform Function(MyPaintTransform, double)>();

  MyPaintTransform mypaint_transform_reflect(
    MyPaintTransform transform,
    double angle_radians,
  ) {
    return _mypaint_transform_reflect(
      transform,
      angle_radians,
    );
  }

  late final _mypaint_transform_reflectPtr = _lookup<
      ffi.NativeFunction<
          MyPaintTransform Function(
              MyPaintTransform, ffi.Float)>>('mypaint_transform_reflect');
  late final _mypaint_transform_reflect = _mypaint_transform_reflectPtr
      .asFunction<MyPaintTransform Function(MyPaintTransform, double)>();

  MyPaintTransform mypaint_transform_translate(
    MyPaintTransform transform,
    double x,
    double y,
  ) {
    return _mypaint_transform_translate(
      transform,
      x,
      y,
    );
  }

  late final _mypaint_transform_translatePtr = _lookup<
      ffi.NativeFunction<
          MyPaintTransform Function(MyPaintTransform, ffi.Float,
              ffi.Float)>>('mypaint_transform_translate');
  late final _mypaint_transform_translate =
      _mypaint_transform_translatePtr.asFunction<
          MyPaintTransform Function(MyPaintTransform, double, double)>();

  void mypaint_transform_point(
    ffi.Pointer<MyPaintTransform> t,
    double x,
    double y,
    ffi.Pointer<ffi.Float> x_out,
    ffi.Pointer<ffi.Float> y_out,
  ) {
    return _mypaint_transform_point(
      t,
      x,
      y,
      x_out,
      y_out,
    );
  }

  late final _mypaint_transform_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<MyPaintTransform>,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('mypaint_transform_point');
  late final _mypaint_transform_point = _mypaint_transform_pointPtr.asFunction<
      void Function(ffi.Pointer<MyPaintTransform>, double, double,
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  void mypaint_update_symmetry_state(
    ffi.Pointer<MyPaintSymmetryData> symmetry_data,
  ) {
    return _mypaint_update_symmetry_state(
      symmetry_data,
    );
  }

  late final _mypaint_update_symmetry_statePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<MyPaintSymmetryData>)>>(
      'mypaint_update_symmetry_state');
  late final _mypaint_update_symmetry_state = _mypaint_update_symmetry_statePtr
      .asFunction<void Function(ffi.Pointer<MyPaintSymmetryData>)>();

  MyPaintSymmetryData mypaint_default_symmetry_data() {
    return _mypaint_default_symmetry_data();
  }

  late final _mypaint_default_symmetry_dataPtr =
      _lookup<ffi.NativeFunction<MyPaintSymmetryData Function()>>(
          'mypaint_default_symmetry_data');
  late final _mypaint_default_symmetry_data = _mypaint_default_symmetry_dataPtr
      .asFunction<MyPaintSymmetryData Function()>();

  void mypaint_symmetry_data_destroy(
    ffi.Pointer<MyPaintSymmetryData> arg0,
  ) {
    return _mypaint_symmetry_data_destroy(
      arg0,
    );
  }

  late final _mypaint_symmetry_data_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<MyPaintSymmetryData>)>>(
      'mypaint_symmetry_data_destroy');
  late final _mypaint_symmetry_data_destroy = _mypaint_symmetry_data_destroyPtr
      .asFunction<void Function(ffi.Pointer<MyPaintSymmetryData>)>();

  void mypaint_symmetry_set_pending(
    ffi.Pointer<MyPaintSymmetryData> data,
    int active,
    double center_x,
    double center_y,
    double symmetry_angle,
    int symmetry_type,
    int rot_symmetry_lines,
  ) {
    return _mypaint_symmetry_set_pending(
      data,
      active,
      center_x,
      center_y,
      symmetry_angle,
      symmetry_type,
      rot_symmetry_lines,
    );
  }

  late final _mypaint_symmetry_set_pendingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<MyPaintSymmetryData>,
              gboolean,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Int32,
              ffi.Int)>>('mypaint_symmetry_set_pending');
  late final _mypaint_symmetry_set_pending =
      _mypaint_symmetry_set_pendingPtr.asFunction<
          void Function(ffi.Pointer<MyPaintSymmetryData>, int, double, double,
              double, int, int)>();

  void mypaint_tile_request_init(
    ffi.Pointer<MyPaintTileRequest> data,
    int level,
    int tx,
    int ty,
    int readonly,
  ) {
    return _mypaint_tile_request_init(
      data,
      level,
      tx,
      ty,
      readonly,
    );
  }

  late final _mypaint_tile_request_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<MyPaintTileRequest>, ffi.Int, ffi.Int,
              ffi.Int, gboolean)>>('mypaint_tile_request_init');
  late final _mypaint_tile_request_init =
      _mypaint_tile_request_initPtr.asFunction<
          void Function(ffi.Pointer<MyPaintTileRequest>, int, int, int, int)>();

  void mypaint_tiled_surface_init(
    ffi.Pointer<MyPaintTiledSurface> self,
    MyPaintTileRequestStartFunction tile_request_start,
    MyPaintTileRequestEndFunction tile_request_end,
  ) {
    return _mypaint_tiled_surface_init(
      self,
      tile_request_start,
      tile_request_end,
    );
  }

  late final _mypaint_tiled_surface_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<MyPaintTiledSurface>,
              MyPaintTileRequestStartFunction,
              MyPaintTileRequestEndFunction)>>('mypaint_tiled_surface_init');
  late final _mypaint_tiled_surface_init =
      _mypaint_tiled_surface_initPtr.asFunction<
          void Function(
              ffi.Pointer<MyPaintTiledSurface>,
              MyPaintTileRequestStartFunction,
              MyPaintTileRequestEndFunction)>();

  void mypaint_tiled_surface_destroy(
    ffi.Pointer<MyPaintTiledSurface> self,
  ) {
    return _mypaint_tiled_surface_destroy(
      self,
    );
  }

  late final _mypaint_tiled_surface_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<MyPaintTiledSurface>)>>(
      'mypaint_tiled_surface_destroy');
  late final _mypaint_tiled_surface_destroy = _mypaint_tiled_surface_destroyPtr
      .asFunction<void Function(ffi.Pointer<MyPaintTiledSurface>)>();

  void mypaint_tiled_surface_set_symmetry_state(
    ffi.Pointer<MyPaintTiledSurface> self,
    int active,
    double center_x,
    double center_y,
    double symmetry_angle,
    int symmetry_type,
    int rot_symmetry_lines,
  ) {
    return _mypaint_tiled_surface_set_symmetry_state(
      self,
      active,
      center_x,
      center_y,
      symmetry_angle,
      symmetry_type,
      rot_symmetry_lines,
    );
  }

  late final _mypaint_tiled_surface_set_symmetry_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<MyPaintTiledSurface>,
              gboolean,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Int32,
              ffi.Int)>>('mypaint_tiled_surface_set_symmetry_state');
  late final _mypaint_tiled_surface_set_symmetry_state =
      _mypaint_tiled_surface_set_symmetry_statePtr.asFunction<
          void Function(ffi.Pointer<MyPaintTiledSurface>, int, double, double,
              double, int, int)>();

  double mypaint_tiled_surface_get_alpha(
    ffi.Pointer<MyPaintTiledSurface> self,
    double x,
    double y,
    double radius,
  ) {
    return _mypaint_tiled_surface_get_alpha(
      self,
      x,
      y,
      radius,
    );
  }

  late final _mypaint_tiled_surface_get_alphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<MyPaintTiledSurface>, ffi.Float,
              ffi.Float, ffi.Float)>>('mypaint_tiled_surface_get_alpha');
  late final _mypaint_tiled_surface_get_alpha =
      _mypaint_tiled_surface_get_alphaPtr.asFunction<
          double Function(
              ffi.Pointer<MyPaintTiledSurface>, double, double, double)>();

  void mypaint_tiled_surface_tile_request_start(
    ffi.Pointer<MyPaintTiledSurface> self,
    ffi.Pointer<MyPaintTileRequest> request,
  ) {
    return _mypaint_tiled_surface_tile_request_start(
      self,
      request,
    );
  }

  late final _mypaint_tiled_surface_tile_request_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<MyPaintTiledSurface>,
                  ffi.Pointer<MyPaintTileRequest>)>>(
      'mypaint_tiled_surface_tile_request_start');
  late final _mypaint_tiled_surface_tile_request_start =
      _mypaint_tiled_surface_tile_request_startPtr.asFunction<
          void Function(ffi.Pointer<MyPaintTiledSurface>,
              ffi.Pointer<MyPaintTileRequest>)>();

  void mypaint_tiled_surface_tile_request_end(
    ffi.Pointer<MyPaintTiledSurface> self,
    ffi.Pointer<MyPaintTileRequest> request,
  ) {
    return _mypaint_tiled_surface_tile_request_end(
      self,
      request,
    );
  }

  late final _mypaint_tiled_surface_tile_request_endPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<MyPaintTiledSurface>,
                  ffi.Pointer<MyPaintTileRequest>)>>(
      'mypaint_tiled_surface_tile_request_end');
  late final _mypaint_tiled_surface_tile_request_end =
      _mypaint_tiled_surface_tile_request_endPtr.asFunction<
          void Function(ffi.Pointer<MyPaintTiledSurface>,
              ffi.Pointer<MyPaintTileRequest>)>();

  void mypaint_tiled_surface_begin_atomic(
    ffi.Pointer<MyPaintTiledSurface> self,
  ) {
    return _mypaint_tiled_surface_begin_atomic(
      self,
    );
  }

  late final _mypaint_tiled_surface_begin_atomicPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<MyPaintTiledSurface>)>>(
      'mypaint_tiled_surface_begin_atomic');
  late final _mypaint_tiled_surface_begin_atomic =
      _mypaint_tiled_surface_begin_atomicPtr
          .asFunction<void Function(ffi.Pointer<MyPaintTiledSurface>)>();

  void mypaint_tiled_surface_end_atomic(
    ffi.Pointer<MyPaintTiledSurface> self,
    ffi.Pointer<MyPaintRectangles> roi,
  ) {
    return _mypaint_tiled_surface_end_atomic(
      self,
      roi,
    );
  }

  late final _mypaint_tiled_surface_end_atomicPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<MyPaintTiledSurface>,
                  ffi.Pointer<MyPaintRectangles>)>>(
      'mypaint_tiled_surface_end_atomic');
  late final _mypaint_tiled_surface_end_atomic =
      _mypaint_tiled_surface_end_atomicPtr.asFunction<
          void Function(ffi.Pointer<MyPaintTiledSurface>,
              ffi.Pointer<MyPaintRectangles>)>();

  ffi.Pointer<MyPaintFixedTiledSurface> mypaint_fixed_tiled_surface_new(
    int width,
    int height,
  ) {
    return _mypaint_fixed_tiled_surface_new(
      width,
      height,
    );
  }

  late final _mypaint_fixed_tiled_surface_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MyPaintFixedTiledSurface> Function(
              ffi.Int, ffi.Int)>>('mypaint_fixed_tiled_surface_new');
  late final _mypaint_fixed_tiled_surface_new =
      _mypaint_fixed_tiled_surface_newPtr.asFunction<
          ffi.Pointer<MyPaintFixedTiledSurface> Function(int, int)>();

  int mypaint_fixed_tiled_surface_get_width(
    ffi.Pointer<MyPaintFixedTiledSurface> self,
  ) {
    return _mypaint_fixed_tiled_surface_get_width(
      self,
    );
  }

  late final _mypaint_fixed_tiled_surface_get_widthPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<MyPaintFixedTiledSurface>)>>(
      'mypaint_fixed_tiled_surface_get_width');
  late final _mypaint_fixed_tiled_surface_get_width =
      _mypaint_fixed_tiled_surface_get_widthPtr
          .asFunction<int Function(ffi.Pointer<MyPaintFixedTiledSurface>)>();

  int mypaint_fixed_tiled_surface_get_height(
    ffi.Pointer<MyPaintFixedTiledSurface> self,
  ) {
    return _mypaint_fixed_tiled_surface_get_height(
      self,
    );
  }

  late final _mypaint_fixed_tiled_surface_get_heightPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<MyPaintFixedTiledSurface>)>>(
      'mypaint_fixed_tiled_surface_get_height');
  late final _mypaint_fixed_tiled_surface_get_height =
      _mypaint_fixed_tiled_surface_get_heightPtr
          .asFunction<int Function(ffi.Pointer<MyPaintFixedTiledSurface>)>();

  void mypaint_fixed_tiled_surface_as_uint8(
    ffi.Pointer<MyPaintFixedTiledSurface> self,
    ffi.Pointer<ffi.Uint8> img,
  ) {
    return _mypaint_fixed_tiled_surface_as_uint8(
      self,
      img,
    );
  }

  late final _mypaint_fixed_tiled_surface_as_uint8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<MyPaintFixedTiledSurface>,
              ffi.Pointer<ffi.Uint8>)>>('mypaint_fixed_tiled_surface_as_uint8');
  late final _mypaint_fixed_tiled_surface_as_uint8 =
      _mypaint_fixed_tiled_surface_as_uint8Ptr.asFunction<
          void Function(
              ffi.Pointer<MyPaintFixedTiledSurface>, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<MyPaintSurface> mypaint_fixed_tiled_surface_interface(
    ffi.Pointer<MyPaintFixedTiledSurface> self,
  ) {
    return _mypaint_fixed_tiled_surface_interface(
      self,
    );
  }

  late final _mypaint_fixed_tiled_surface_interfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<MyPaintSurface> Function(
                  ffi.Pointer<MyPaintFixedTiledSurface>)>>(
      'mypaint_fixed_tiled_surface_interface');
  late final _mypaint_fixed_tiled_surface_interface =
      _mypaint_fixed_tiled_surface_interfacePtr.asFunction<
          ffi.Pointer<MyPaintSurface> Function(
              ffi.Pointer<MyPaintFixedTiledSurface>)>();
}

class MyPaintRectangle extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

class MyPaintRectangles extends ffi.Struct {
  @ffi.Int()
  external int num_rectangles;

  external ffi.Pointer<MyPaintRectangle> rectangles;
}

/// MyPaintSurface:
///
/// Abstract surface type for the MyPaint brush engine. The surface interface
/// lets the brush engine specify dabs to render, and to pick color.
class MyPaintSurface extends ffi.Struct {
  external MyPaintSurfaceDrawDabFunction draw_dab;

  external MyPaintSurfaceGetColorFunction get_color;

  external MyPaintSurfaceBeginAtomicFunction begin_atomic;

  external MyPaintSurfaceEndAtomicFunction end_atomic;

  external MyPaintSurfaceDestroyFunction destroy;

  external MyPaintSurfaceSavePngFunction save_png;

  @ffi.Int()
  external int refcount;
}

typedef MyPaintSurfaceDrawDabFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<MyPaintSurface>,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float)>>;
typedef MyPaintSurfaceGetColorFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<MyPaintSurface>,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Pointer<ffi.Float>,
            ffi.Pointer<ffi.Float>,
            ffi.Pointer<ffi.Float>,
            ffi.Pointer<ffi.Float>,
            ffi.Float)>>;
typedef MyPaintSurfaceBeginAtomicFunction = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MyPaintSurface>)>>;
typedef MyPaintSurfaceEndAtomicFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<MyPaintSurface>, ffi.Pointer<MyPaintRectangles>)>>;
typedef MyPaintSurfaceDestroyFunction = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MyPaintSurface>)>>;
typedef MyPaintSurfaceSavePngFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<MyPaintSurface>, ffi.Pointer<ffi.Char>,
            ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>;

abstract class MyPaintBrushInput {
  static const int PRESSURE = 0;
  static const int RANDOM = 1;
  static const int STROKE = 2;
  static const int DIRECTION = 3;
  static const int TILT_DECLINATION = 4;
  static const int TILT_ASCENSION = 5;
  static const int SPEED1 = 6;
  static const int SPEED2 = 7;
  static const int CUSTOM = 8;
  static const int DIRECTION_ANGLE = 9;
  static const int ATTACK_ANGLE = 10;
  static const int TILT_DECLINATIONX = 11;
  static const int TILT_DECLINATIONY = 12;
  static const int GRIDMAP_X = 13;
  static const int GRIDMAP_Y = 14;
  static const int VIEWZOOM = 15;
  static const int BRUSH_RADIUS = 16;
  static const int BARREL_ROTATION = 17;
  static const int MYPAINT_BRUSH_INPUTS_COUNT = 18;
}

abstract class MyPaintBrushSetting {
  static const int OPAQUE = 0;
  static const int OPAQUE_MULTIPLY = 1;
  static const int OPAQUE_LINEARIZE = 2;
  static const int RADIUS_LOGARITHMIC = 3;
  static const int HARDNESS = 4;
  static const int SOFTNESS = 5;
  static const int ANTI_ALIASING = 6;
  static const int DABS_PER_BASIC_RADIUS = 7;
  static const int DABS_PER_ACTUAL_RADIUS = 8;
  static const int DABS_PER_SECOND = 9;
  static const int GRIDMAP_SCALE = 10;
  static const int GRIDMAP_SCALE_X = 11;
  static const int GRIDMAP_SCALE_Y = 12;
  static const int RADIUS_BY_RANDOM = 13;
  static const int SPEED1_SLOWNESS = 14;
  static const int SPEED2_SLOWNESS = 15;
  static const int SPEED1_GAMMA = 16;
  static const int SPEED2_GAMMA = 17;
  static const int OFFSET_BY_RANDOM = 18;
  static const int OFFSET_Y = 19;
  static const int OFFSET_X = 20;
  static const int OFFSET_ANGLE = 21;
  static const int OFFSET_ANGLE_ASC = 22;
  static const int OFFSET_ANGLE_VIEW = 23;
  static const int OFFSET_ANGLE_2 = 24;
  static const int OFFSET_ANGLE_2_ASC = 25;
  static const int OFFSET_ANGLE_2_VIEW = 26;
  static const int OFFSET_ANGLE_ADJ = 27;
  static const int OFFSET_MULTIPLIER = 28;
  static const int OFFSET_BY_SPEED = 29;
  static const int OFFSET_BY_SPEED_SLOWNESS = 30;
  static const int SLOW_TRACKING = 31;
  static const int SLOW_TRACKING_PER_DAB = 32;
  static const int TRACKING_NOISE = 33;
  static const int COLOR_H = 34;
  static const int COLOR_S = 35;
  static const int COLOR_V = 36;
  static const int RESTORE_COLOR = 37;
  static const int CHANGE_COLOR_H = 38;
  static const int CHANGE_COLOR_L = 39;
  static const int CHANGE_COLOR_HSL_S = 40;
  static const int CHANGE_COLOR_V = 41;
  static const int CHANGE_COLOR_HSV_S = 42;
  static const int SMUDGE = 43;
  static const int PAINT_MODE = 44;
  static const int SMUDGE_TRANSPARENCY = 45;
  static const int SMUDGE_LENGTH = 46;
  static const int SMUDGE_LENGTH_LOG = 47;
  static const int SMUDGE_BUCKET = 48;
  static const int SMUDGE_RADIUS_LOG = 49;
  static const int ERASER = 50;
  static const int STROKE_THRESHOLD = 51;
  static const int STROKE_DURATION_LOGARITHMIC = 52;
  static const int STROKE_HOLDTIME = 53;
  static const int CUSTOM_INPUT = 54;
  static const int CUSTOM_INPUT_SLOWNESS = 55;
  static const int ELLIPTICAL_DAB_RATIO = 56;
  static const int ELLIPTICAL_DAB_ANGLE = 57;
  static const int DIRECTION_FILTER = 58;
  static const int LOCK_ALPHA = 59;
  static const int COLORIZE = 60;
  static const int POSTERIZE = 61;
  static const int POSTERIZE_NUM = 62;
  static const int SNAP_TO_PIXEL = 63;
  static const int PRESSURE_GAIN_LOG = 64;
  static const int MYPAINT_BRUSH_SETTINGS_COUNT = 65;
}

abstract class MyPaintBrushState {
  static const int X = 0;
  static const int Y = 1;
  static const int PRESSURE = 2;
  static const int PARTIAL_DABS = 3;
  static const int ACTUAL_RADIUS = 4;
  static const int SMUDGE_RA = 5;
  static const int SMUDGE_GA = 6;
  static const int SMUDGE_BA = 7;
  static const int SMUDGE_A = 8;
  static const int LAST_GETCOLOR_R = 9;
  static const int LAST_GETCOLOR_G = 10;
  static const int LAST_GETCOLOR_B = 11;
  static const int LAST_GETCOLOR_A = 12;
  static const int LAST_GETCOLOR_RECENTNESS = 13;
  static const int ACTUAL_X = 14;
  static const int ACTUAL_Y = 15;
  static const int NORM_DX_SLOW = 16;
  static const int NORM_DY_SLOW = 17;
  static const int NORM_SPEED1_SLOW = 18;
  static const int NORM_SPEED2_SLOW = 19;
  static const int STROKE = 20;
  static const int STROKE_STARTED = 21;
  static const int CUSTOM_INPUT = 22;
  static const int RNG_SEED = 23;
  static const int ACTUAL_ELLIPTICAL_DAB_RATIO = 24;
  static const int ACTUAL_ELLIPTICAL_DAB_ANGLE = 25;
  static const int DIRECTION_DX = 26;
  static const int DIRECTION_DY = 27;
  static const int DECLINATION = 28;
  static const int ASCENSION = 29;
  static const int VIEWZOOM = 30;
  static const int VIEWROTATION = 31;
  static const int DIRECTION_ANGLE_DX = 32;
  static const int DIRECTION_ANGLE_DY = 33;
  static const int ATTACK_ANGLE = 34;
  static const int FLIP = 35;
  static const int GRIDMAP_X = 36;
  static const int GRIDMAP_Y = 37;
  static const int DECLINATIONX = 38;
  static const int DECLINATIONY = 39;
  static const int DABS_PER_BASIC_RADIUS = 40;
  static const int DABS_PER_ACTUAL_RADIUS = 41;
  static const int DABS_PER_SECOND = 42;
  static const int BARREL_ROTATION = 43;
  static const int STATES_COUNT = 44;
}

class MyPaintBrushSettingInfo extends ffi.Struct {
  external ffi.Pointer<gchar> cname;

  external ffi.Pointer<gchar> name;

  @gboolean()
  external int constant;

  @ffi.Float()
  external double min;

  @ffi.Float()
  external double def;

  @ffi.Float()
  external double max;

  external ffi.Pointer<gchar> tooltip;
}

typedef gchar = ffi.Char;
typedef gboolean = gint;
typedef gint = ffi.Int;

class MyPaintBrushInputInfo extends ffi.Struct {
  external ffi.Pointer<gchar> cname;

  @ffi.Float()
  external double hard_min;

  @ffi.Float()
  external double soft_min;

  @ffi.Float()
  external double normal;

  @ffi.Float()
  external double soft_max;

  @ffi.Float()
  external double hard_max;

  external ffi.Pointer<gchar> name;

  external ffi.Pointer<gchar> tooltip;
}

class MyPaintBrush extends ffi.Opaque {}

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

class MyPaintTransform extends ffi.Struct {
  @ffi.Array.multi([3, 3])
  external ffi.Array<ffi.Array<ffi.Float>> rows;
}

/// MyPaintSymmetryType: Enumeration of different kinds of symmetry
///
/// Prefix = 'MYPAINT_SYMMETRY_TYPE_'
/// VERTICAL: reflection across the y-axis
/// HORIZONTAL: reflection across the x-axis
/// VERTHORZ: reflection across x-axis and y-axis, special case of SNOWFLAKE
/// ROTATIONAL: rotational symmetry by N symmetry lines around a point
/// SNOWFLAKE: rotational symmetry w. reflection across the N symmetry lines
abstract class MyPaintSymmetryType {
  static const int VERTICAL = 0;
  static const int HORIZONTAL = 1;
  static const int VERTHORZ = 2;
  static const int ROTATIONAL = 3;
  static const int SNOWFLAKE = 4;
  static const int TYPES_COUNT = 5;
}

/// MyPaintSymmetryState: Contains the basis for symmetry calculations
///
/// This is used to calculate the matrices that are
/// used for the actual symmetry calculations, and to
/// determine whether the matrices need to be recalculated.
class MyPaintSymmetryState extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Float()
  external double center_x;

  @ffi.Float()
  external double center_y;

  @ffi.Float()
  external double angle;

  @ffi.Float()
  external double num_lines;
}

/// MyPaintSymmetryData: Contains data used for symmetry calculations
///
/// Instances contain a current and pending symmetry basis, and the
/// matrices used for the actual symmetry transforms. When the pending
/// state is modified, the "pending_changes" flag should be set.
/// Matrix recalculation should not be performed during draw operations.
class MyPaintSymmetryData extends ffi.Struct {
  external MyPaintSymmetryState state_current;

  external MyPaintSymmetryState state_pending;

  @gboolean()
  external int pending_changes;

  @gboolean()
  external int active;

  @ffi.Int()
  external int num_symmetry_matrices;

  external ffi.Pointer<MyPaintTransform> symmetry_matrices;
}

/// MyPaintTiledSurface:
///
/// Interface and convenience class for implementing a #MyPaintSurface backed by a tile store.
///
/// The size of the surface is infinite, and consumers need just implement two vfuncs.
class MyPaintTiledSurface extends ffi.Struct {
  external MyPaintSurface parent;

  external MyPaintTileRequestStartFunction tile_request_start;

  external MyPaintTileRequestEndFunction tile_request_end;

  external MyPaintSymmetryData symmetry_data;

  external ffi.Pointer<OperationQueue> operation_queue;

  @ffi.Int()
  external int num_bboxes;

  @ffi.Int()
  external int num_bboxes_dirtied;

  external ffi.Pointer<MyPaintRectangle> bboxes;

  @ffi.Array.multi([32])
  external ffi.Array<MyPaintRectangle> default_bboxes;

  @gboolean()
  external int threadsafe_tile_requests;

  @ffi.Int()
  external int tile_size;
}

typedef MyPaintTileRequestStartFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<MyPaintTiledSurface>,
            ffi.Pointer<MyPaintTileRequest>)>>;

class MyPaintTileRequest extends ffi.Struct {
  @ffi.Int()
  external int tx;

  @ffi.Int()
  external int ty;

  @gboolean()
  external int readonly;

  external ffi.Pointer<guint16> buffer;

  external gpointer context;

  @ffi.Int()
  external int thread_id;

  @ffi.Int()
  external int mipmap_level;
}

typedef guint16 = ffi.UnsignedShort;
typedef gpointer = ffi.Pointer<ffi.Void>;
typedef MyPaintTileRequestEndFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<MyPaintTiledSurface>,
            ffi.Pointer<MyPaintTileRequest>)>>;

class OperationQueue extends ffi.Opaque {}

class MyPaintFixedTiledSurface extends ffi.Opaque {}

const int MYPAINT_TILE_SIZE = 64;

const int MYPAINT_MAX_THREADS = 16;

const int MYPAINT_MAX_MIPMAP_LEVEL = 4;

const int FALSE = 0;

const int TRUE = 1;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 36;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int NUM_BBOXES_DEFAULT = 32;
